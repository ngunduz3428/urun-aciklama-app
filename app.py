
import streamlit as st
import pandas as pd
from io import BytesIO

st.set_page_config(page_title="ÃœrÃ¼n AÃ§Ä±klama OtomatÄ±", layout="centered")

st.title("â˜• ÃœrÃ¼n AÃ§Ä±klama OtomatÄ±")
st.write("Excel dosyanÄ± yÃ¼kle, biz senin iÃ§in <strong>HTML formatÄ±nda</strong> SEO dostu Ã¼rÃ¼n aÃ§Ä±klamasÄ± oluÅŸturalÄ±m!", unsafe_allow_html=True)

def generate_html_description(row):
    def clean(value):
        return str(value).strip() if pd.notna(value) and str(value).strip().lower() != "nan" else ""

    name = clean(row.get("name [tr]"))
    power = clean(row.get("GÃ¼Ã§"))
    auto_off = "otomatik kapanma Ã¶zelliÄŸi" if "Evet" in clean(row.get("Otomatik kapanma")) else ""
    sound_alert = "sesli uyarÄ± sistemi" if "Evet" in clean(row.get("Sesli uyarÄ±")) else ""
    tank = clean(row.get("Su tankÄ± kapasitesi")).split("-")[-1]
    cups = clean(row.get("Bardak kapasitesi")).split("_")[-1]
    color = clean(row.get("ÃœrÃ¼n rengi")).split("-")[-1]
    lock = "emniyet kilidi" if "Var" in clean(row.get("Emniyet klidi")) else ""
    light = "uyarÄ± Ä±ÅŸÄ±ÄŸÄ±" if "Var" in clean(row.get("UyarÄ± Ä±ÅŸÄ±ÄŸÄ±")) else ""

    features = []
    if power: features.append(f"<span>{power} gÃ¼cÃ¼</span>")
    if auto_off: features.append(f"<span>{auto_off}</span>")
    if sound_alert: features.append(f"<span>{sound_alert}</span>")
    if tank: features.append(f"<span>{tank} L su tankÄ±</span>")
    if cups: features.append(f"<span>{cups} bardak kapasitesi</span>")
    if color: features.append(f"<span>{color} tasarÄ±mÄ±</span>")
    if lock: features.append(f"<span>{lock}</span>")
    if light: features.append(f"<span>{light}</span>")

    if name:
        desc = f"<strong>{name}</strong>"
        if features:
            desc += ", " + ", ".join(features) + "."
        desc += " Bu <em>kahve makinesi</em>, <strong>ÅŸÄ±k tasarÄ±mÄ±</strong> ve <strong>kullanÄ±m kolaylÄ±ÄŸÄ±</strong> ile mutfaÄŸÄ±nÄ±zÄ±n vazgeÃ§ilmezi olacak."
    else:
        desc = ""

    return desc

def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

uploaded_file = st.file_uploader("ğŸ“‚ Excel dosyasÄ±nÄ± yÃ¼kle (.xlsx)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.success("Dosya yÃ¼klendi! Ä°Ã§eriÄŸi aÅŸaÄŸÄ±da:")
    st.dataframe(df)

    with st.spinner("HTML aÃ§Ä±klamalar oluÅŸturuluyor..."):
        df["ÃœrÃ¼n AÃ§Ä±klamasÄ± (HTML)"] = df.apply(generate_html_description, axis=1)

    st.success("âœ… AÃ§Ä±klamalar oluÅŸturuldu!")
    st.markdown("ğŸ“‹ AÅŸaÄŸÄ±da oluÅŸturulan HTML aÃ§Ä±klamalarÄ± yer almakta:")

    st.dataframe(df[["name [tr]", "ÃœrÃ¼n AÃ§Ä±klamasÄ± (HTML)"]])

    excel_data = to_excel(df)
    st.download_button(
        label="ğŸ“¥ HTML AÃ§Ä±klamalarÄ± Excel'e Aktar",
        data=excel_data,
        file_name="urun_aciklama_html.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
