
import streamlit as st
import pandas as pd
from io import BytesIO

st.set_page_config(page_title="ÃœrÃ¼n AÃ§Ä±klama OtomatÄ±", layout="centered")

st.title("â˜• ÃœrÃ¼n AÃ§Ä±klama OtomatÄ±")
st.write("Excel dosyanÄ± yÃ¼kle, biz senin iÃ§in <strong>HTML formatÄ±nda</strong> SEO dostu Ã¼rÃ¼n aÃ§Ä±klamasÄ± oluÅŸturalÄ±m!", unsafe_allow_html=True)

# ÃœrÃ¼n kategorisini algÄ±layan fonksiyon
def detect_category(product_name: str) -> str:
    name = product_name.lower()
    if "kahve" in name:
        return "kahve_makinesi"
    elif "lazer" in name or "ipl" in name:
        return "ipl_lazer"
    elif "Ã¼tÃ¼" in name:
        return "utu"
    else:
        return "genel"

# AÃ§Ä±klama oluÅŸturan fonksiyon
def generate_description(row):
    name = row.get("name [tr]", "")
    category = detect_category(name)
    html = f"<strong>{name}</strong> "

    if category == "kahve_makinesi":
        html += "ile geleneksel TÃ¼rk kahvesini modern teknolojiyle buluÅŸturun. "
    elif category == "ipl_lazer":
        html += "ile pÃ¼rÃ¼zsÃ¼z bir cilt deneyimini evinizde yaÅŸayÄ±n. "
    elif category == "utu":
        html += "ile kÄ±yafetlerinizi zahmetsizce Ã¼tÃ¼leyin. "
    else:
        html += "ile fonksiyonel kullanÄ±m kolaylÄ±ÄŸÄ±nÄ± bir arada sunar. "

    def ekle(label, kolon):
        deger = str(row.get(kolon, "")).strip()
        if deger and deger.lower() != "nan":
            return f"<span><strong>{label}:</strong> {deger}</span>. "
        return ""

    html += ekle("GÃ¼Ã§", "GÃ¼Ã§")
    html += ekle("Bardak Kapasitesi", "Bardak kapasitesi")
    html += ekle("Su Kapasitesi", "Su tankÄ± kapasitesi")
    html += ekle("Renk", "ÃœrÃ¼n rengi")
    html += ekle("Sesli UyarÄ±", "Sesli uyarÄ±")
    html += ekle("Otomatik Kapanma", "Otomatik kapanma")
    html += ekle("Emniyet Kilidi", "Emniyet klidi")
    html += ekle("UyarÄ± IÅŸÄ±ÄŸÄ±", "UyarÄ± Ä±ÅŸÄ±ÄŸÄ±")

    html += "<em>DetaylÄ± ve gÃ¼venli kullanÄ±m iÃ§in ideal bir tercihtir.</em>"
    return html

uploaded_file = st.file_uploader("Excel dosyanÄ±zÄ± yÃ¼kleyin", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    if "name [tr]" not in df.columns:
        st.error("YÃ¼klediÄŸiniz Excel dosyasÄ±nda 'name [tr]' sÃ¼tunu bulunamadÄ±.")
    else:
        df["ÃœrÃ¼n AÃ§Ä±klamasÄ± (HTML-SEO)"] = df.apply(generate_description, axis=1)
        st.dataframe(df[["name [tr]", "ÃœrÃ¼n AÃ§Ä±klamasÄ± (HTML-SEO)"]])

        # Excel Ã§Ä±ktÄ±sÄ± olarak indir
        def convert_df(df):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name="AÃ§Ä±klamalar")
            return output.getvalue()

        excel_data = convert_df(df)
        st.download_button(
            label="ğŸ“¥ Excel Olarak Ä°ndir",
            data=excel_data,
            file_name="urun_aciklama_output.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
